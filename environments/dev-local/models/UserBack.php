<?php

namespace app\models;

use Yii;
use app\models\My\MyActiveRecord;
use app\models\My\MyHelper;
use yii\helpers\ArrayHelper;
use yii\web\HttpException;
use yii\web\IdentityInterface;
use yii\helpers\Url;
use yii\web\Cookie;

/**
 * This is the model class for table "user".
 *
 * @property int $id Id
 * @property string $avatar avatar
 * @property int $type type user
 * @property string $username username
 * @property string $name name
 * @property string $surname surname
 * @property string $email email
 * @property string $role Роли
 * @property string $access_token access token
 * @property string $auth_key auth key
 * @property string $password_hash password hash
 * @property string|null $password_reset_token password reset token
 * @property string|null $verification_token verification token
 * @property int $last_online time_online
 * @property boolean $is_admin is admin
 * @property int $status_view status view
 * @property int $status_del status del
 * @property int $created_at date create
 * @property int $updated_at date update
 * @property int $deleted_at date delete
 *
 */
class User extends MyActiveRecord implements IdentityInterface
{
    public $file_avatar;

    const NOT_ACTIVE_TIME_MIN   = 30;           // задаем через сколько времени пользователь считается не активным
    const USER_ADMIN_TRUE       = 1;            // получаем админа

    const TYPE_USER = 1;                        // Тип полользователя User
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'user';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['type', 'last_online', 'status_view', 'status_del', 'created_at', 'updated_at', 'deleted_at'], 'integer'],
            [['email', 'password_hash'], 'required'],
            [['is_admin'], 'boolean'],
            [['avatar'], 'string', 'max' => 100],
            [['name', 'username', 'surname', 'email', 'password_hash', 'password_reset_token', 'verification_token'], 'string', 'max' => 255],
            [['access_token', 'auth_key'], 'string', 'max' => 32],
            [['role'], 'string', 'max' => 50],
            [['email'], 'unique'],
            [['file_avatar'], 'image', 'minWidth' => 50, 'maxWidth' => 1024, 'minHeight' => 50, 'maxHeight' => 1024, 'extensions' => 'jpg, gif, png', 'maxSize' => 1024 * 1024 * 2],
            ['username', 'unique', 'targetClass' => 'app\models\User', 'message' => 'имя пользователя уже занято.'],
            [['password_reset_token'], 'unique'],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'avatar' => Yii::t('app', 'Avatar'),
            'type' => Yii::t('app', 'Type User'),
            'name' => Yii::t('app', 'Name'),
            'file_avatar' => Yii::t('app', 'Аватар'),
            'surname' => Yii::t('app', 'Surname'),
            'username' => Yii::t('app', 'Username'),
            'email' => Yii::t('app', 'Email'),
            'role' => Yii::t('app', 'Role'),
            'access_token' => Yii::t('app', 'Access Token'),
            'auth_key' => Yii::t('app', 'Auth Key'),
            'password_hash' => Yii::t('app', 'Password Hash'),
            'password_reset_token' => Yii::t('app', 'Password Reset Token'),
            'verification_token' => Yii::t('app', 'Verification Token'),
            'last_online' => Yii::t('app', 'Last Online'),
            'is_admin' => Yii::t('app', 'Is Admin'),
            'status_view' => Yii::t('app', 'Status View'),
            'status_del' => Yii::t('app', 'Status Del'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'deleted_at' => Yii::t('app', 'Deleted At'),
        ];
    }

    public function afterFind() {
        return parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert) {
        if(!parent::beforeSave($insert))
            return false;

        if ($this->isNewRecord)
            $this->auth_key = Yii::$app->security->generateRandomString();

        return true;
    }

    public function getId() {
        return $this->id;
    }

    /**
     * Validates password
     *
     * @param string $password password to validate
     * @return bool if password provided is valid for current user
     */
    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password, $this->password_hash);
    }

    /**
     * Finds an identity by the given ID.
     *
     * @param string|int $id the ID to be looked for
     * @return IdentityInterface|null the identity object that matches the given ID.
     */
    public static function findIdentity($id)
    {
        return static::findOne($id);
    }

    /**
     * Finds an identity by the given token.
     *
     * @param string $token the token to be looked for
     * @return IdentityInterface|null the identity object that matches the given token.
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    /**
     * @return string current user auth key
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @param string $authKey
     * @return bool if auth key is valid for current user
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * @return string
     * @throws yii\base\Exception
     */
    public function upload() {
        if(!is_dir(Yii::getAlias('@uploads/avatar')))
            mkdir(Yii::getAlias('@uploads/avatar'));

        $name_avatar = $this->avatar_file->baseName.'_'.Yii::$app->security->generateRandomString() . '.' . $this->avatar_file->extension;
        $this->avatar_file->saveAs(Yii::getAlias('@uploads/avatar/') . $name_avatar);
        return $name_avatar;
    }

    /**
     * Finds user by username
     *
     * @param string $email
     * @return static|null
     */
    public static function findByUsername($email) {
        $user = static::findOne(['email' => $email, 'status_del' => 0]);
        if(!$user)
            $user = static::findOne(['username' => $email, 'status_del' => 0]);

        return $user;
    }

    /**
     * Finds user by username (admin)
     *
     * @param string $email
     * @return static|null
     */
    public static function findByUsernameAdmin($email) {
        return static::findOne(['email' => $email, 'is_admin' => self::USER_ADMIN_TRUE , 'status_del' => 0]);
    }

    /**
     * Generates password hash from password and sets it to the model
     * @param $password
     * @throws yii\base\Exception
     */
    public function setPassword($password) {
        $this->password_hash = Yii::$app->security->generatePasswordHash($password);
    }

    /**
     * Generates "remember me" authentication key
     */
    public function generateAuthKey() {
        $this->auth_key = Yii::$app->security->generateRandomString();
    }

    /**
     * @throws yii\base\Exception
     */
    public static function generateEmailVerificationToken() {
        return Yii::$app->security->generateRandomString();
    }

    /**
     * Получаем полное имя пользователя
     * @return string
     */
    public function getFullName() {
        return "{$this->name} {$this->surname}";
    }

    /**
     * Получаем имя пользователя
     * @return string
     */
    public function getUserName() {
        return $this->username ?? 'unnamed';
    }

    /**
     * @return bool
     * @throws HttpException
     */
    public function softDelete() {
        $this->status_del = 1;
        $this->deleted_at = time();
        if(!$this->save())
            throw new HttpException(400 ,'Save filed');

        return true;
    }

    /**
     * @return bool
     * @throws HttpException
     */
    public function softRestore() {
        $this->status_del = 0;
        $this->deleted_at = 0;
        if(!$this->save())
            throw new HttpException(400 ,'Save filed');

        return true;
    }

    public static function HashPassword($password) {
        return md5('d1cc18f961deaee' . md5($password) . '89511c1663fbcaaa5');
    }

    /**
     * @param $attr
     * @param null $default
     * @return array|mixed|null
     */
    public static function attributeArray($attr, $default = null) {
        $attribute = [
        ];

        if(!isset($attribute[$attr]))
            return null;

        if($default !== null)
            return ArrayHelper::merge(is_array($default) ? $default : [0 => $default], $attribute[$attr]);

        return $attribute[$attr];
    }

    /**
     * Функция для генерации AuthKey
     * @var $save - передаем парамент или сохранять пользователя
     * @return bool
     * @throws HttpException
     * @throws yii\base\Exception
     */
    public function generateAccessTokenUser($save = false) {
        $this->access_token = Yii::$app->security->generateRandomString();
        if(!$save)
            return $this->access_token;

        if(!$this->save())
            MyHelper::badRequest('error save');

        $this->refresh();
        return true;
    }

    /**
     * Функция для изенения время онлайна пользователя
     *
     * @return $this
     * @throws HttpException
     */
    public function setLastOnline() {
        $this->last_online = time();
        if(!$this->save())
            MyHelper::badSaveRequest($this->errors,'setLastOnline');

        return $this;
    }

    /**
     * Функция которая возвращает или пользователь онлайн
     *
     * @return bool
     */
    public function isOnline() {
        // время которое пользователь не онлайн
        $left_time = (time() - $this->last_online) / 60;
        if($left_time > self::NOT_ACTIVE_TIME_MIN)
            return false;

        return true;
    }

    /**
     * Получаем уникальный password_reset_token
     *
     * @return string
     * @throws yii\base\Exception
     */
    public static function getPasswordResetToken()
    {
        $password_reset_token = Yii::$app->security->generateRandomString();
        while(true)
        {
            $is_user = User::find()
                ->andWhere(['=', 'password_reset_token', $password_reset_token])
                ->one();

            if(!$is_user)
                break;
        }

        return $password_reset_token;
    }

    /**
     * получаем информацию пользователя
     *
     * @return array
     */
    public function getUserInfo()
    {
        return [
            'id' => $this->id,
            'email' => $this->email,
            'type' => $this->type,
            'full_name' => $this->getFullName(),
            'avatar' => $this->avatar,
            'access_token' => $this->access_token,
        ];
    }

    /**
     * Функция для создания пользователя
     *
     * @param $username
     * @param $email
     * @param $password
     * @return User
     * @throws HttpException
     * @throws Yii\base\Exception
     */
    public static function create($username, $email, $password)
    {
        $user = new self();
        $user->username = $username;
        $user->email = $email;
        $user->verification_token = User::generateEmailVerificationToken();

        $user->setPassword($password);
        $user->generateAuthKey();
        if(!$user->save())
            MyHelper::badSaveRequest($user->errors,'signup');

        return $user;
    }

    /**
     * Проверяем или у пользователя есть права админа
     *
     * @return bool
     */
    public function isAdmin()
    {
        if($this->is_admin)
            return true;
        return false;
    }

    /**
     * Загрузка файлов изображения
     * @return string
     * @throws yii\base\Exception
     */
    public function uploadAvatar() {
        $dir_alias = '@uploads/avatar';

        MyHelper::checkDir(Yii::getAlias('@uploads'));
        MyHelper::checkDir(Yii::getAlias($dir_alias));

        $name_avatar = $this->file_avatar->baseName.'_'.Yii::$app->security->generateRandomString() . '.' . $this->file_avatar->extension;
        $this->file_avatar->saveAs(Yii::getAlias($dir_alias.'/') . $name_avatar);

        MyHelper::createThumbnail($name_avatar, 100, 100, Yii::getAlias($dir_alias.'/'));
        MyHelper::createThumbnail($name_avatar, 187, 260, Yii::getAlias($dir_alias.'/'));
        return $name_avatar;
    }

    /**
     * Получаем аватар пользователя
     *
     * @param $width
     * @param $height
     * @return string
     */
    public function getAvatar($width = 0, $height = 0)
    {
        if(!$this->avatar)
            return "https://via.placeholder.com/{$width}x{$height}/000000/FFFFFF/?text=:)";

        $image_name = $this->avatar;
        if($width && $height)
        {
            $explode_image = explode('.', $this->avatar);
            $image_name = "{$explode_image[0]}-{$width}x{$height}.{$explode_image[1]}";
        }

        return Url::to(["/assets/uploads/avatar/{$image_name}"], true);
    }

    /**
     * Получаем пользователя по email
     *
     * @param $email
     * @return array|yii\db\ActiveRecord|null
     */
    public static function getModelByEmail($email)
    {
        return self::find()
            ->andWhere(['=', 'email', $email])
            ->one();
    }

    /**
     * Функция для изменения пароля
     *
     * @param $password
     * @throws HttpException
     * @throws Yii\base\Exception
     */
    public function changePassword($password)
    {
        $this->setPassword($password);
        if(!$this->save())
            MyHelper::badSaveRequest($this->errors, 'changePassword', 'User');
    }

    /**
     * Получить ссылку на профиль пользователя
     *
     * @return string
     */
    public function getLinkToProfile()
    {
        return Url::to(['/user/info', 'id' => $this->id]);
    }

    /**
     * Задать id_spy_user
     *
     * @param $id_user
     */
    public function setCookieSubId($id_user){
        \Yii::$app->response->cookies->add(new Cookie([
            'name' => 'id_spy_user',
            'value' => $id_user,
            'domain' => Yii::$app->params['cookie_domain'] ?? '',
            'path' => '/',
        ]));
    }

    /**
     * Получить id_spy_user
     *
     * @return int
     */
    public function getCookieSubId(){
        $request = \Yii::$app->request;
        return intval($request->cookies['id_spy_user']->value ?? 0);
    }

    /**
     * Почистить id_spy_user
     */
    public function clearCookieSubId(){
        \Yii::$app->response->cookies->remove(new Cookie([
            'name' => 'id_spy_user',
            'domain' => Yii::$app->params['cookie_domain'] ?? '',
            'path' => '/',
        ]));
    }
}
